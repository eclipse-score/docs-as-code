# *******************************************************************************
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0
#
# SPDX-License-Identifier: Apache-2.0
# *******************************************************************************

name: Consumer Regression Tests
on:
  # Run on releases to ensure compatibility
  release:
    types: [published]
  
  # Run when explicitly requested via PR label
  pull_request:
    types: [opened, reopened, synchronize, labeled]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      consumers:
        description: 'Comma-separated list of consumers to test (e.g., platform,process_description)'
        required: false
        default: ''

jobs:
  consumer-tests:
    runs-on: ubuntu-latest
    # Only run if:
    # 1. It's a release, OR
    # 2. PR has 'test-consumers' label, OR  
    # 3. Manual workflow dispatch
    if: |
      github.event_name == 'release' || 
      contains(github.event.pull_request.labels.*.name, 'test-consumers') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      
      - name: Cache Bazel and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/pip
          key: ${{ runner.os }}-consumer-tests-${{ hashFiles('**/*.bazel', '**/BUILD', '**/*.bzl', 'src/requirements.txt', 'src/**/*.py') }}
      
      - name: Setup Bazel with cache
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          disk-cache: true
          repository-cache: true
          bazelisk-cache: true
      
      - name: Set up git configuration
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Run Consumer Tests
        env:
          CONSUMER_TEST_REPOS: ${{ github.event.inputs.consumers }}
        run: |
          # Setup IDE support first to ensure all dependencies are available
          bazel run //src:ide_support
          
          # Run the consumer tests
          bazel test //src/consumer_tests:test_consumer_regression --test_output=all
      
      - name: Generate Consumer Test Report
        if: always()  # Run even if tests fail to get the report
        run: |
          # Generate a detailed JSON report
          bazel run //src/consumer_tests:run_consumer_tests -- \
            --output consumer_test_report.json \
            $(if [ -n "${{ github.event.inputs.consumers }}" ]; then 
                for consumer in $(echo "${{ github.event.inputs.consumers }}" | tr ',' ' '); do
                  echo "--consumer $consumer"
                done
              fi)
      
      - name: Upload Consumer Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: consumer-test-report
          path: consumer_test_report.json
          retention-days: 30
      
      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const reportData = fs.readFileSync('consumer_test_report.json', 'utf8');
              const report = JSON.parse(reportData);
              
              const summary = report.summary;
              const successRate = (summary.success_rate * 100).toFixed(1);
              
              let comment = `## Consumer Test Results\n\n`;
              comment += `üìä **Summary**: ${summary.passed}/${summary.total_tests} tests passed (${successRate}%)\n\n`;
              
              // Add per-consumer breakdown
              comment += `### Results by Consumer\n\n`;
              for (const [consumer, stats] of Object.entries(report.by_consumer)) {
                const icon = stats.failed === 0 ? '‚úÖ' : '‚ùå';
                comment += `${icon} **${consumer}**: ${stats.passed} passed, ${stats.failed} failed\n`;
              }
              
              // Add failures if any
              if (report.failed_tests && report.failed_tests.length > 0) {
                comment += `\n### Failed Tests\n\n`;
                for (const failure of report.failed_tests) {
                  comment += `‚ùå \`${failure.consumer}/${failure.command}\`: ${failure.error}\n`;
                }
              }
              
              comment += `\n---\n*This comment was automatically generated by the consumer test workflow.*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read or parse consumer test report:', error);
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## Consumer Test Results\n\n‚ùì Consumer tests were run but the report could not be parsed. Check the workflow logs for details.'
              });
            }