# *******************************************************************************
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0
#
# SPDX-License-Identifier: Apache-2.0
# *******************************************************************************
# yaml-language-server: $schema=./metamodel-schema.json

needs_types_base_options:
  optional_options:
    source_code_link: ^https://github.com/.*
  # Custom semantic validation rules
  prohibited_words:
    # req-Id: tool_req__docs_common_attr_title
    title:
      - shall
      - must
      - will
    # req-Id: tool_req__docs_common_attr_description
    content:
      - just
      - about
      - really
      - some
      - thing
      - absolutely

needs_types:
  ##############################################################################
  # Process Metamodel
  ##############################################################################
  # TSF
  tsf:
    title: "TSF"
    prefix: "tsf__"
    mandatory_options:
      id: "^tsf__[0-9a-zA-Z_-]*$"
      status: "^(draft|valid)$"
    optional_links:
      links: "^.*$"

  tenet:
    title: "Tenet"
    prefix: "tenet__"
    mandatory_options:
      id: "^tenet__[0-9a-zA-Z_-]*$"
      status: "^(draft|valid)$"
    optional_links:
      links: "^.*$"

  assertion:
    title: "Assertion"
    prefix: "^assertion__"
    mandatory_options:
      id: "assertion__[0-9a-zA-Z_-]*$"
      status: "^(draft|valid)$"
    optional_links:
      links: "^.*$"

  # Standards
  # req-Id: tool_req__docs_stdreq_types
  std_req:
    title: Standard Requirement
    prefix: std_req__
    mandatory_options:
      id: std_req__(iso26262|isosae21434|isopas8926|aspice_40)__[0-9a-zA-Z_-]*$
      status: ^(valid)$
    optional_links:
      links: ^.*$
    tags:
      - requirement

  std_wp:
    title: Standard Work Product
    prefix: std_wp__
    mandatory_options:
      id: std_wp__(iso26262|isosae21434|isopas8926|aspice_40)__[0-9a-z_]*$
      status: ^(valid)$

  # Workflow
  # req-Id: tool_req__docs_wf_types
  workflow:
    title: Workflow
    prefix: wf__
    mandatory_options:
      id: ^wf__[0-9a-z_]*$
      status: ^(valid|draft)$
    mandatory_links:
      input: ^wp__.*$
      output: ^wp__.*$
      approved_by: ^rl__.*$
      responsible: ^rl__.*$
    optional_links:
      supported_by: ^rl__.*$
      contains: ^gd_(req|temp|chklst|guidl|meth)__.*$
      has: ^doc_(getstrt|concept)__.*$

  # Guidances
  gd_req:
    title: Process Requirements
    prefix: gd_req__
    mandatory_options:
      id: ^gd_req__[0-9a-z_]*$
      # req-Id: tool_req__docs_common_attr_status
      status: ^(valid|draft)$
    optional_links:
      complies: ^std_req__(iso26262|isosae21434|isopas8926|aspice_40)__.*$
      # req-Id: tool_req__docs_req_link_satisfies_allowed
      satisfies: ^wf__.*$
    tags:
      - requirement

  gd_temp:
    title: Process Template
    prefix: gd_temp__
    mandatory_options:
      id: ^gd_temp__[0-9a-z_]*$
      status: ^(valid|draft)$
    optional_links:
      complies: std_req__(iso26262|isodae21434|isopas8926|aspice_40)__.*$

  gd_chklst:
    title: Process Checklist
    prefix: gd_chklst__
    mandatory_options:
      id: ^gd_chklst__[0-9a-z_]*$
      status: ^(valid|draft)$
    optional_links:
      complies: std_req__(iso26262|isodae21434|isopas8926|aspice_40)__.*$

  gd_guidl:
    title: Process Guideline
    prefix: gd_guidl__
    mandatory_options:
      id: ^gd_guidl__[0-9a-z_]*$
      status: ^(valid|draft)$
    optional_links:
      complies: std_req__(iso26262|isosae21434|isopas8926|aspice_40)__.*$

  gd_method:
    title: Process Method
    prefix: gd_meth__
    mandatory_options:
      id: ^gd_meth__[0-9a-z_]*$
      status: ^(valid|draft)$
    optional_links:
      complies: std_req__(iso26262|isosae21434|isopas8926|aspice_40)__.*$
  # S-CORE Workproduct
  workproduct:
    title: Workproduct
    prefix: wp__
    mandatory_options:
      id: ^wp__[0-9a-z_]*$
      status: ^(valid|draft)$
    optional_links:
      complies: std_(wp__iso26262|wp__isosae21434|wp__isopas8926|iic_aspice_40)__.*$

  # Role
  role:
    title: Role
    prefix: rl__
    mandatory_options:
      id: ^rl__[0-9a-z_]*$
    optional_links:
      contains: ^rl__.*$

  # Documents, process_description only
  doc_concept:
    title: Concept Definition
    prefix: doc_concept__
    mandatory_options:
      id: ^doc_concept__[0-9a-z_]*$
      status: ^(valid|draft)$

  doc_getstrt:
    title: Getting Startet
    prefix: doc_getstrt__
    mandatory_options:
      id: ^doc_getstrt__[0-9a-z_]*$
      status: ^(valid|draft)$

  # Documents, score, and other modules only
  document:
    title: Generic Document
    prefix: doc__
    mandatory_options:
      id: ^doc__[0-9a-z_]*$
      status: ^(valid|draft|invalid)$
    optional_options:
      safety: "^(QM|ASIL_B)$"
      security: "^(YES|NO)$"
    optional_links:
      realizes: "^wp__.+$"

  doc_tool:
    title: Tool Verification Report
    prefix: doc_tool__
    mandatory_options:
      id: ^doc_tool__[0-9a-z_]*$
      status: ^(draft|evaluated|qualified|released|rejected)$
      version: ^.*$
      safety_affected: "^(YES|NO)$"
      security_affected: "^(YES|NO)$"
      tcl: "^(LOW|HIGH)$"
    optional_links:
      realizes: "^wp__.+$"

  # Requirements
  # req-Id: tool_req__docs_req_types
  stkh_req:
    title: Stakeholder Requirement
    prefix: stkh_req__
    mandatory_options:
      id: ^stkh_req__[0-9a-z_]*$
      # req-Id: tool_req__docs_req_attr_reqtype
      reqtype: ^(Functional|Interface|Process|Legal|Non-Functional)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
      # req-Id: tool_req__docs_req_attr_rationale
      rationale: ^.+$
    optional_options:
      security: ^(YES|NO)$
      codelink: ^.*$
      testlink: ^.*$
      # req-Id: tool_req__docs_req_attr_reqcov
      reqcovered: ^(YES|NO)$
      # req-Id: tool_req__docs_req_attr_testcov
      testcovered: ^(YES|NO)$
      hash: ^.*$
    tags:
      - requirement

  # req-Id: tool_req__docs_req_types
  feat_req:
    title: Feature Requirement
    prefix: feat_req__
    style: node
    mandatory_options:
      id: ^feat_req__[0-9a-z_]*$
      # req-Id: tool_req__docs_req_attr_reqtype
      reqtype: ^(Functional|Interface|Process|Legal|Non-Functional)$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      # req-Id: tool_req__docs_req_link_satisfies_allowed
      satisfies: ^stkh_req__.*$
    optional_options:
      codelink: ^.*$
      testlink: ^.*$
      # req-Id: tool_req__docs_req_attr_reqcov
      reqcovered: ^(YES|NO)$
      # req-Id: tool_req__docs_req_attr_testcov
      testcovered: ^(YES|NO)$
      hash: ^.*$
    tags:
      - requirement

  # req-Id: tool_req__docs_req_types
  comp_req:
    title: Component Requirement
    prefix: comp_req__
    mandatory_options:
      id: ^comp_req__[0-9a-z_]*$
      # req-Id: tool_req__docs_req_attr_reqtype
      reqtype: ^(Functional|Interface|Process|Legal|Non-Functional)$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      # req-Id: tool_req__docs_req_link_satisfies_allowed
      satisfies: ^feat_req__.*$
    optional_options:
      codelink: ^.*$
      testlink: ^.*$
      # req-Id: tool_req__docs_req_attr_reqcov
      reqcovered: ^(YES|NO)$
      # req-Id: tool_req__docs_req_attr_testcov
      testcovered: ^(YES|NO)$
      hash: ^.*$
    tags:
      - requirement

  # req-Id: tool_req__docs_req_types
  tool_req:
    title: Tool Requirement
    prefix: tool_req__
    mandatory_options:
      id: ^tool_req__[0-9a-z_]*$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    optional_links:
      # req-Id: tool_req__docs_req_link_satisfies_allowed
      satisfies: ^.*$
    optional_options:
      # req-Id: tool_req__docs_req_attr_reqtype
      reqtype: ^(Functional|Interface|Process|Legal|Non-Functional)$
      codelink: ^.*$
      tags: ^.*$
      testlink: ^.*$
      # req-Id: tool_req__docs_req_attr_reqcov
      reqcovered: ^(YES|NO)$
      # req-Id: tool_req__docs_req_attr_testcov
      testcovered: ^(YES|NO)$
      hash: ^.*$
      implemented: ^(YES|PARTIAL|NO)$
      parent_covered: ^.*$
      parent_has_problem: ^.*$
    tags:
      - requirement

  # req-Id: tool_req__docs_req_types
  aou_req:
    title: Assumption of Use
    prefix: aou_req__
    mandatory_options:
      id: ^aou_req__[0-9a-z_]*$
      # req-Id: tool_req__docs_req_attr_reqtype
      reqtype: ^(Functional|Interface|Process|Legal|Non-Functional)$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    optional_options:
      codelink: ^.*$
      testlink: ^.*$
      # req-Id: tool_req__docs_req_attr_reqcov
      reqcovered: ^(YES|NO)$
      # req-Id: tool_req__docs_req_attr_testcov
      testcovered: ^(YES|NO)$
      hash: ^.*$
    optional_links:
      mitigates: ^.*$
    tags:
      - requirement


  # Architecture
  feat_arc_sta:
    title: Feature Architecture Static View
    prefix: feat_arc_sta__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^feat_arc_sta__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      includes: ^logic_arc_int(_op)*__.+$
    optional_links:
      fulfils: ^feat_req__.+$
    tags:
      - architecture_element

  feat_arc_dyn:
    title: Feature Architecture Dynamic View
    prefix: feat_arc_dyn__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^feat_arc_dyn__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      fulfils: ^feat_req__.+$

  logic_arc_int:
    title: Logical Architecture Interfaces
    prefix: logic_arc_int__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^logic_arc_int__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    optional_links:
      includes: ^logic_arc_int_op__.+$
      fulfils: ^comp_req__.+$
    tags:
      - architecture_element

  logic_arc_int_op:
    title: Logical Architecture Interface Operation
    prefix: logic_arc_int_op__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^logic_arc_int_op__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      included_by: ^logic_arc_int__.+$
    tags:
      - architecture_element

  mod_view_sta:
    title: Module Architecture Static View
    prefix: mod_view_sta__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^mod_view_sta__[0-9a-z_]+$
    mandatory_links:
      includes: ^comp_arc_sta__.+$

  mod_view_dyn:
    title: Module Architecture Dynamic View
    prefix: mod_view_dyn__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^mod_view_dyn__[0-9a-z_]+$

  comp_arc_sta:
    title: Component Architecture Static View
    prefix: comp_arc_sta__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^comp_arc_sta__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    optional_links:
      implements: ^real_arc_int(_op)*__.+$
      includes: ^comp_arc_sta__.+$
      uses: ^real_arc_int(_op)*__.+$
      fulfils: ^comp_req__.+$
    tags:
      - architecture_element

  comp_arc_dyn:
    title: Component Architecture Dynamic View
    prefix: comp_arc_dyn__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^comp_arc_dyn__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    optional_links:
      fulfils: ^comp_req__.+$
    tags:
      - architecture_element

  real_arc_int:
    title: Component Architecture Interfaces
    prefix: real_arc_int__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^real_arc_int__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
      language: ^(cpp|rust)$
    optional_links:
      fulfils: ^comp_req__.+$

  real_arc_int_op:
    title: Component Architecture Interface Operation
    prefix: real_arc_int_op__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^real_arc_int_op__[0-9a-z_]+$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      included_by: ^real_arc_int__.+$
    optional_links:
      implements: ^logic_arc_int_op__.+$

  review_header:
    prefix: review__header
    title: Review Header
    mandatory_options:
      id: ^review__header__[0-9a-z_]*$
      reviewers: ^.*$
      approvers: ^.*$
      hash: ^.*$
      template: ^.*$

  # Implementation
  dd_sta:
    title: Static detailed design
    prefix: dd_sta__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^dd_sta__[0-9a-z_]*$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      implements: ^comp_req__.*$
      satisfies: ^comp_arc_sta__.*$
    optional_links:
      includes: ^sw_unit__.*$

  dd_dyn:
    title: Dynamic detailed design
    prefix: dd_dyn__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^dd_dyn__[0-9a-z_]*$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
    mandatory_links:
      implements: ^comp_req__.*$
      satisfies: ^comp_arc_sta__.*$

  sw_unit:
    title: Software unit
    prefix: sw_unit__
    mandatory_options:
      id: ^sw_unit__[0-9a-z_]*$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$
  sw_unit_int:
    title: Software unit interfaces
    prefix: sw_unit_int__
    color: #FEDCD2
    style: card
    mandatory_options:
      id: ^sw_unit_int__[0-9a-z_]*$
      security: ^(YES|NO)$
      safety: ^(QM|ASIL_B)$
      status: ^(valid|invalid)$

  # Safety Analysis DFA
  feat_plat_saf_dfa:
    title: DFA
    prefix: feat_plat_saf_dfa__
    mandatory_options:
      id: ^feat_plat_saf_dfa__[0-9a-z_]+$
      violation_id: ^.*$
      violation_cause: ^.*$
      sufficient: ^(yes|no)$
      status: ^(valid|invalid)$
    optional_options:
      sufficient: ^(yes|no)$
    mandatory_links:
      mitigates: ^(feat_req__.*|aou_req__.*)$
      verifies: ^feat_arc_sta__[0-9a-z_]*$
    optional_links:
      mitigation_issue: ^https://github.com/.*$


  feat_saf_dfa:
    title: DFA
    prefix: feat_saf_dfa__
    mandatory_options:
      id: ^feat_saf_dfa__[0-9a-z_]+$
      violation_id: ^.*$
      violation_cause: ^.*$
      sufficient: ^(yes|no)$
      status: ^(valid|invalid)$
    mandatory_links:
      mitigates: ^(feat_req__.*|aou_req__.*)$
      verifies: ^feat_arc_sta__[0-9a-z_]*$
    optional_links:
      mitigation_issue: ^https://github.com/.*$

  comp_saf_dfa:
    title: DFA
    prefix: comp_saf_dfa__
    mandatory_options:
      id: ^comp_saf_dfa__[0-9a-z_]+$
      violation_id: ^.*$
      violation_cause: ^.*$
      sufficient: ^(yes|no)$
      status: ^(valid|invalid)$
    mandatory_links:
      mitigates: ^(comp_req__.*|aou_req__.*)$
      verifies: ^comp_arc_sta__[0-9a-z_]*$
    optional_links:
      mitigation_issue: ^https://github.com/.*$

  # # Safety Analysis FMEA
  feat_saf_fmea:
    title: FMEA
    prefix: feat_saf_fmea__
    mandatory_options:
      id: ^feat_saf_fmea__[0-9a-z_]+$
      violation_id: ^.*$
      violation_cause: ^.*$
      sufficient: ^(yes|no)$
      status: ^(valid|invalid)$
    mandatory_links:
      mitigates: ^(feat_req__.*|aou_req__.*)$
      verifies: ^feat_arc_dyn__[0-9a-z_]*$
    optional_links:
      mitigation_issue: ^https://github.com/.*$

  comp_saf_fmea:
    title: FMEA
    prefix: comp_saf_fmea__
    mandatory_options:
      id: ^comp_saf_fmea__[0-9a-z_]+$
      violation_id: ^.*$
      violation_cause: ^.*$
      sufficient: ^(yes|no)$
      status: ^(valid|invalid)$
    mandatory_links:
      mitigates: ^(comp_req__.*|aou_req__.*)$
      verifies: ^comp_arc_dyn__[0-9a-z_]*$
    optional_links:
      mitigation_issue: ^https://github.com/.*$

# Extra link types, which shall be available and allow need types to be linked to each other.
# We use a dedicated linked type for each type of a connection, for instance from
# a specification to a requirement. This makes filtering and visualization of such connections
# much easier, as we can sure the target need of a link has always a specific type.
# Docs: https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-extra-links
needs_extra_links:
  ##############################################################
  #  Process Metamodel
  ##############################################################
  # Workflow
  contains:
    incoming: contained by
    outgoing: contains

  has:
    incoming: relates to
    outgoing: has

  input:
    incoming: is input to
    outgoing: needs input

  output:
    incoming: is output from
    outgoing: outputs

  # Roles
  responsible:
    incoming: is responsible for
    outgoing: responsible

  approved_by:
    incoming: approves
    outgoing: approved by

  supported_by:
    incoming: supports
    outgoing: supported by

  # Workproduct
  complies:
    incoming: complies to
    outgoing: complies

  # document, doc_tool
  realizes:
    incoming: realized by
    outgoing: realizes

  ##############################################################
  #  S-CORE Metamodel
  ##############################################################
  # Requirements
  satisfies:
    incoming: satisfied by
    outgoing: satisfies

  # Architecture
  fulfils:
    incoming: fulfilled by
    outgoing: fulfils

  implements:
    incoming: implemented by
    outgoing: implements

  uses:
    incoming: used by
    outgoing: uses

  includes:
    incoming: included by
    outgoing: includes

  included_by:
    incoming: includes
    outgoing: included by

  mitigates:
    incoming: mitigated by
    outgoing: mitigates

  verifies:
    incoming: verified by
    outgoing: verifies
##############################################################
# Graph Checks
# The graph checks focus on the relation of the needs and their attributes.
# Checks are defined in the following way:
# check_name:
#   needs:defines the needs types to which the check should be applied
#   - [include / exclude]: need types to which the check should be applied;
#                          multiple need types can be defined by separating them with a comma;
#                          to perform the check on all needs types, set include to .
#   - condition: defines (together with apply) the condition which the needs need to fulfill
#     - [and / or / xor / not]
# - check: defines the check that should be applied
#   - <relation>: defines the relation which is used derive the type of the parent need
#   - condition: defines the condition that should be checked
#     - [and / or / xor / not]
##############################################################
# req- Id: gd_req__req__linkage_architecture
# req- Id: gd_req__req__linkage_safety

# Checks if the child requirement has the at least the same safety level as the parent requirement. It's allowed to "overfill" the safety level of the parent.
# ASIL decomposition is not foreseen in S-CORE. Therefore it's not allowed to have a child requirement with a lower safety level than the parent requirement as
# it is possible in an decomposition case.
# If need-req is `QM`, parent must be `QM`.
graph_checks:
  req_safety_linkage_qm:
    needs:
      include: comp_req, feat_req
      condition: safety == QM
    check:
      satisfies: safety == QM
  # If need-req is `ASIL_B`, parent must be `QM` or `ASIL_B`.
  req_safety_linkage_asil_b:
    needs:
      include: comp_req, feat_req
      condition: safety == ASIL_B
    check:
      satisfies:
        or:
          - safety == ASIL_B
          - safety == QM
  # saf - ID gd_req__saf_linkage_safety
  # It shall be checked that Safety Analysis (DFA and FMEA) can only be linked via mitigate against
  #  - <Feature | Component | AoU> Requirements with the same ASIL or
  #  - <Feature | Component | AoU> Requirements with a higher ASIL
  # as the corresponding ASIL of the Feature or Component that is analyzed.
  saf_linkage_safety:
    needs:
      include: feat_saf_fmea, comp_saf_fmea, feat_plat_saf_dfa, feat_saf_dfa, comp_saf_dfa
      condition: safety == ASIL_B
    check:
      mitigates: safety != QM
